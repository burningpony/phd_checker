require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ResponsesController do

  def mock_response(stubs = {})
    @mock_response ||= mock_model(Response, stubs)
  end

  describe 'GET index' do
    it 'assigns all responses as @responses' do
      allow(Response).to receive_message_chain(:order, :paginate) { [mock_response] }
      get :index
      expect(assigns(:responses)).to eq([mock_response])
    end
  end

  describe 'GET show' do
    it 'assigns the requested response as @response' do
      allow(Response).to receive(:find).with('37') { mock_response }
      get :show, id: '37'
      expect(assigns(:response)).to be(mock_response)
    end
  end

  describe 'GET new' do
    it 'assigns a new response as @response' do
      allow(Response).to receive(:new) { mock_response }
      get :new
      expect(assigns(:response)).to be(mock_response)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested response as @response' do
      allow(Response).to receive(:find).with('37') { mock_response }
      get :edit, id: '37'
      expect(assigns(:response)).to be(mock_response)
    end
  end

  describe 'POST create' do
    before { User.create }
    describe 'with valid params' do
      it 'assigns a newly created response as @response' do
        allow(Response).to receive(:new).with({ 'these' => 'params' }) { mock_response(save: true) }
        post :create, response: { 'these' => 'params' }, user_id: User.first
        expect(assigns(:response)).to be(mock_response)
      end

      it 'redirects to the created response' do
        allow(Response).to receive(:new) { mock_response(save: true) }
        post :create, response: {}, user_id: User.first
        expect(response).to redirect_to(response_url(mock_response))
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved response as @response' do
        allow(Response).to receive(:new).with({ 'these' => 'params' }) { mock_response(save: false) }
        post :create, response: { 'these' => 'params' }, user_id: User.first
        expect(assigns(:response)).to be(mock_response)
      end

      it "re-renders the 'new' template" do
        allow(Response).to receive(:new) { mock_response(save: false) }
        post :create, response: {}, user_id: User.first
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      it 'updates the requested response' do
        allow(Response).to receive(:find).with('37') { mock_response }
        expect(mock_response).to receive(:update_attributes).with('these' => 'params')
        put :update, id: '37', response: { 'these' => 'params' }
      end

      it 'assigns the requested response as @response' do
        allow(Response).to receive(:find) { mock_response(update_attributes: true) }
        put :update, id: '1'
        expect(assigns(:response)).to be(mock_response)
      end

      it 'redirects to the response' do
        allow(Response).to receive(:find) { mock_response(update_attributes: true) }
        put :update, id: '1'
        expect(response).to redirect_to(response_url(mock_response))
      end
    end

    describe 'with invalid params' do
      it 'assigns the response as @response' do
        allow(Response).to receive(:find) { mock_response(update_attributes: false) }
        put :update, id: '1'
        expect(assigns(:response)).to be(mock_response)
      end

      it "re-renders the 'edit' template" do
        allow(Response).to receive(:find) { mock_response(update_attributes: false) }
        put :update, id: '1'
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested response' do
      allow(Response).to receive(:find).with('37') { mock_response }
      expect(mock_response).to receive(:destroy)
      delete :destroy, id: '37'
    end

    it 'redirects to the responses list' do
      allow(Response).to receive(:find) { mock_response }
      delete :destroy, id: '1'
      expect(response).to redirect_to(responses_url)
    end
  end

end
